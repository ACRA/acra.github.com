"use strict";(self.webpackChunkacra=self.webpackChunkacra||[]).push([[187],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(n),p=a,m=g["".concat(s,".").concat(p)]||g[p]||d[p]||o;return n?i.createElement(m,r(r({ref:t},u),{},{components:n})):i.createElement(m,r({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5130:function(e,t,n){n.d(t,{l7:function(){return v},TP:function(){return b}});var i=n(7294),a=n(3117),o=n(6010),r=n(2389),l=n(7392),s=n(7094),c=n(2466),u="tabList__CuJ",d="tabItem_LNqP";function g(e){var t,n,r=e.lazy,g=e.block,p=e.defaultValue,m=e.values,f=e.groupId,h=e.className,b=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),w=(0,l.l)(v,(function(e,t){return e.value===t.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(t=null!=p?p:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,s.U)(),k=_.tabGroupChoices,R=_.setTabGroupChoices,T=(0,i.useState)(y),x=T[0],N=T[1],S=[],C=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var I=k[f];null!=I&&I!==x&&v.some((function(e){return e.value===I}))&&N(I)}var E=function(e){var t=e.currentTarget,n=S.indexOf(t),i=v[n].value;i!==x&&(C(t),N(i),null!=f&&R(f,String(i)))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var i,a=S.indexOf(e.currentTarget)+1;n=null!=(i=S[a])?i:S[0];break;case"ArrowLeft":var o,r=S.indexOf(e.currentTarget)-1;n=null!=(o=S[r])?o:S[S.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":g},h)},v.map((function(e){var t=e.value,n=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return S.push(e)},onKeyDown:O,onFocus:E,onClick:E},r,{className:(0,o.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),r?(0,i.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function p(e){var t=(0,r.Z)();return i.createElement(g,(0,a.Z)({key:String(t)},e))}var m="tabItem_Ymn6";function f(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",className:(0,o.Z)(m,a),hidden:n},t)}function h(e){var t=e.children,n=e.type,a=e.languages;return i.createElement(p,{defaultValue:"kotlin",groupId:n,values:a},t.map((function(e){var t=e.props.children.props,n=t&&t.className?t.className.replace(/^(language-)/,""):"kotlin";return i.createElement(f,{key:n,value:n},e)})))}function b(e){var t=e.children;return i.createElement(h,{type:"gradle",languages:[{label:"Kotlin",value:"kotlin"},{label:"Groovy",value:"groovy"}]},t)}function v(e){var t=e.children;return i.createElement(h,{type:"android",languages:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}]},t)}},1093:function(e,t,n){n.r(t),n.d(t,{assets:function(){return v},contentTitle:function(){return h},default:function(){return _},frontMatter:function(){return f},metadata:function(){return b},toc:function(){return w}});var i=n(3117),a=n(102),o=n(7294),r=n(3905),l=n(5130),s="container_gaFB",c="float_I4op";function u(e){var t=e.children,n=e.src,i=e.alt;return o.createElement("div",{id:s},o.createElement("img",{id:c,src:n,alt:i}),t)}var d=n.p+"assets/images/toast-2906fe51ada0457d3659be83b99b46c2.png",g=n.p+"assets/images/dialog-9664f2575b9591f672c285a494c87502.png",p=n.p+"assets/images/notification-1995232157133ae76345efb2882b385c.png",m=["components"],f={sidebar_position:2},h=void 0,b={unversionedId:"Interactions",id:"Interactions",title:"Interactions",description:"The default behavior of ACRA is to send crash reports silently. From the application user point of view, the app closes, and that's all. Though, a report has been sent without the user being aware of it.",source:"@site/docs/Interactions.mdx",sourceDirName:".",slug:"/Interactions",permalink:"/docs/Interactions",draft:!1,editUrl:"https://github.com/acra/acra/edit/master/web/docs/Interactions.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/docs/Setup"},next:{title:"Senders",permalink:"/docs/Senders"}},v={},w=[{value:"Silent",id:"silent",level:2},{value:"Toast",id:"toast",level:2},{value:"Dialog",id:"dialog",level:2},{value:"Notification",id:"notification",level:2}],y={toc:w};function _(e){var t=e.components,n=(0,a.Z)(e,m);return(0,r.kt)("wrapper",(0,i.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The default behavior of ACRA is to send crash reports silently. From the application user point of view, the app closes, and that's all. Though, a report has been sent without the user being aware of it."),(0,r.kt)("p",null,"Depending on the state of your application and your concern of your users data plan usage and private data handling, you might prefer notifying them that a crash report has been sent, or even ask them the authorization to send one... and why not ask them to describe what they were doing during the crash.\nThe following section details those user interactions."),(0,r.kt)("h2",{id:"silent"},"Silent"),(0,r.kt)("p",null,"Nothing shown, nothing to configure."),(0,r.kt)(u,{src:d,alt:"Toast Example",mdxType:"SideImage"},(0,r.kt)("h2",{id:"toast"},"Toast"),(0,r.kt)("p",null,"A Toast with your text is shown. No user interaction."),(0,r.kt)(l.l7,{mdxType:"AndroidCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"toast { \n     //required\n    text = getString(R.string.toast_text)\n    //defaults to Toast.LENGTH_LONG\n    length = Toast.LENGTH_LONG \n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"new ToastConfigurationBuilder()\n    //required\n    .withText(getString(R.string.toast_text))\n    //defaults to Toast.LENGTH_LONG\n    .withLength(Toast.LENGTH_LONG)\n    .build()\n")))),(0,r.kt)(u,{src:g,alt:"Dialog Example",mdxType:"SideImage"},(0,r.kt)("h2",{id:"dialog"},"Dialog"),(0,r.kt)("p",null,"A widely customizable dialog is shown. A report will only be sent if the user agrees."),(0,r.kt)(l.l7,{mdxType:"AndroidCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"dialog {\n    //required\n    text = getString(R.string.dialog_text)\n    //optional, enables the dialog title\n    title = getString(R.string.dialog_title)\n    //defaults to android.R.string.ok\n    positiveButtonText = getString(R.string.dialog_positive)\n    //defaults to android.R.string.cancel\n    negativeButtonText = getString(R.string.dialog_negative)\n    //optional, enables the comment input\n    commentPrompt = getString(R.string.dialog_comment)\n    //optional, enables the email input\n    emailPrompt = getString(R.string.dialog_email)\n    //defaults to android.R.drawable.ic_dialog_alert\n    resIcon = R.drawable.dialog_icon\n    //optional, defaults to @android:style/Theme.Dialog\n    resTheme = R.style.dialog_theme\n    //allows other customization\n    reportDialogClass = MyCustomDialog::class.java\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"new DialogConfigurationBuilder()\n    //required\n    .withText(getString(R.string.dialog_text))\n    //optional, enables the dialog title\n    .withTitle(getString(R.string.dialog_title))\n    //defaults to android.R.string.ok\n    .withPositiveButtonText(getString(R.string.dialog_positive))\n    //defaults to android.R.string.cancel\n    .withNegativeButtonText(getString(R.string.dialog_negative))\n    //optional, enables the comment input\n    .withCommentPrompt(getString(R.string.dialog_comment))\n    //optional, enables the email input\n    .withEmailPrompt(getString(R.string.dialog_email))\n    //defaults to android.R.drawable.ic_dialog_alert\n    .withResIcon(R.drawable.dialog_icon)\n    //optional, defaults to @android:style/Theme.Dialog\n    .withResTheme(R.style.dialog_theme)\n    //allows other customization\n    .withReportDialogClass(MyCustomDialog.class)\n    .build()\n"))),(0,r.kt)("p",null,"If you need more control than the configuration provides, you can set your own dialog activity in ",(0,r.kt)("inlineCode",{parentName:"p"},"reportDialogClass"),". Remember, activities have to be registered in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<activity\n    \x3c!-- required --\x3e\n    android:name="my.package.MyCustomDialog"\n    android:process=":acra"\n    \x3c!-- recommended --\x3e\n    android:excludeFromRecents="true"\n    android:finishOnTaskLaunch="true"\n    android:launchMode="singleInstance"/>\n'))),(0,r.kt)(u,{src:p,alt:"Notification Example",mdxType:"SideImage"},(0,r.kt)("h2",{id:"notification"},"Notification"),(0,r.kt)("p",null,"A notification is shown. A report will only be sent if the user agrees."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If the user has disabled this notification channel in the Android settings, no report will be sent!\nThis may be the default setting. It is your own responsibility to ask the user to allow these notifications.")),(0,r.kt)(l.l7,{mdxType:"AndroidCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"notification {\n    //required\n    title = getString(R.string.notification_title)\n    //required\n    text = getString(R.string.notification_text)\n    //required\n    channelName = getString(R.string.notification_channel)\n    //optional channel description\n    channelDescription = getString(R.string.notification_channel_desc)\n    //defaults to NotificationManager.IMPORTANCE_HIGH\n    resChannelImportance = NotificationManager.IMPORTANCE_MAX\n    //optional, enables ticker text\n    tickerText = getString(R.string.notification_ticker)\n    //defaults to android.R.drawable.stat_sys_warning\n    resIcon = R.drawable.notification_icon\n    //defaults to android.R.string.ok\n    sendButtonText = getString(R.string.notification_send)\n    //defaults to android.R.drawable.ic_menu_send\n    resSendButtonIcon = R.drawable.notification_send\n    //defaults to android.R.string.cancel\n    discardButtonText = getString(R.string.notification_discard)\n    //defaults to android.R.drawable.ic_menu_delete\n    resDiscardButtonIcon = R.drawable.notification_discard\n    //optional, enables inline comment button\n    sendWithCommentButtonText = getString(R.string.notification_send_with_comment)\n    //required if above is set\n    resSendWithCommentButtonIcon = R.drawable.notification_send_with_comment\n    //optional inline comment hint\n    commentPrompt = getString(R.string.notification_comment)\n    //defaults to false\n    sendOnClick = false\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"new NotificationConfigurationBuilder()\n    //required\n    .withTitle(getString(R.string.notification_title))\n    //required\n    .withText(getString(R.string.notification_text))\n    //required\n    .withChannelName(getString(R.string.notification_channel))\n    //optional channel description\n    .withChannelDescription(getString(R.string.notification_channel_desc))\n    //defaults to NotificationManager.IMPORTANCE_HIGH\n    .withResChannelImportance(NotificationManager.IMPORTANCE_MAX)\n    //optional, enables ticker text\n    .withTickerText(getString(R.string.notification_ticker))\n    //defaults to android.R.drawable.stat_sys_warning\n    .withResIcon(R.drawable.notification_icon)\n    //defaults to android.R.string.ok\n    .withSendButtonText(getString(R.string.notification_send))\n    //defaults to android.R.drawable.ic_menu_send\n    .withResSendButtonIcon(R.drawable.notification_send)\n    //defaults to android.R.string.cancel\n    .withDiscardButtonText(getString(R.string.notification_discard))\n    //defaults to android.R.drawable.ic_menu_delete\n    .withResDiscardButtonIcon(R.drawable.notification_discard)\n    //optional, enables inline comment button\n    .withSendWithCommentButtonText(getString(R.string.notification_send_with_comment))\n    //required if above is set\n    .withResSendWithCommentButtonIcon(R.drawable.notification_send_with_comment)\n    //optional inline comment hint\n    .withCommentPrompt(getString(R.string.notification_comment))\n    //defaults to false\n    .withSendOnClick(false)\n    .build()\n")))))}_.isMDXComponent=!0}}]);